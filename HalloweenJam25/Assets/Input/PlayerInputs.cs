//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""GroundMap"",
            ""id"": ""fd5993ec-debb-4714-86a9-779c246dddf5"",
            ""actions"": [
                {
                    ""name"": ""Directions"",
                    ""type"": ""Value"",
                    ""id"": ""be91e8d0-827a-403f-b979-b32748f8add3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact Press"",
                    ""type"": ""Button"",
                    ""id"": ""30a48dae-a0a9-4346-9a72-86b0ea652b64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a89f445-16e2-4bbb-8100-99d21dab66f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector MNK"",
                    ""id"": ""23dcb759-c4b0-4995-b453-133bdb653352"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba65e840-6a5c-4854-84f6-79e0c38fc6f3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""42e06b67-43b6-422e-981f-068377a73eb0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4bcfe703-8e3b-4653-9b31-2b9547c704e0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c7843094-5c53-419b-9741-03275057dffe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8f8c80c1-aa29-47dd-9ab3-2789a2adc488"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20578bd8-7e0f-477b-b1eb-e937b3d808d5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d38daa00-6239-4931-9709-7c3a2716e70f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5afed25-b911-4da3-9ee6-8cdb009c433c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24d2102a-83ad-4bb5-994c-5b4aa700b66c"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GroundMap
        m_GroundMap = asset.FindActionMap("GroundMap", throwIfNotFound: true);
        m_GroundMap_Directions = m_GroundMap.FindAction("Directions", throwIfNotFound: true);
        m_GroundMap_InteractPress = m_GroundMap.FindAction("Interact Press", throwIfNotFound: true);
        m_GroundMap_Aim = m_GroundMap.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GroundMap
    private readonly InputActionMap m_GroundMap;
    private List<IGroundMapActions> m_GroundMapActionsCallbackInterfaces = new List<IGroundMapActions>();
    private readonly InputAction m_GroundMap_Directions;
    private readonly InputAction m_GroundMap_InteractPress;
    private readonly InputAction m_GroundMap_Aim;
    public struct GroundMapActions
    {
        private @PlayerInputs m_Wrapper;
        public GroundMapActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Directions => m_Wrapper.m_GroundMap_Directions;
        public InputAction @InteractPress => m_Wrapper.m_GroundMap_InteractPress;
        public InputAction @Aim => m_Wrapper.m_GroundMap_Aim;
        public InputActionMap Get() { return m_Wrapper.m_GroundMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundMapActions set) { return set.Get(); }
        public void AddCallbacks(IGroundMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GroundMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GroundMapActionsCallbackInterfaces.Add(instance);
            @Directions.started += instance.OnDirections;
            @Directions.performed += instance.OnDirections;
            @Directions.canceled += instance.OnDirections;
            @InteractPress.started += instance.OnInteractPress;
            @InteractPress.performed += instance.OnInteractPress;
            @InteractPress.canceled += instance.OnInteractPress;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
        }

        private void UnregisterCallbacks(IGroundMapActions instance)
        {
            @Directions.started -= instance.OnDirections;
            @Directions.performed -= instance.OnDirections;
            @Directions.canceled -= instance.OnDirections;
            @InteractPress.started -= instance.OnInteractPress;
            @InteractPress.performed -= instance.OnInteractPress;
            @InteractPress.canceled -= instance.OnInteractPress;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
        }

        public void RemoveCallbacks(IGroundMapActions instance)
        {
            if (m_Wrapper.m_GroundMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGroundMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GroundMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GroundMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GroundMapActions @GroundMap => new GroundMapActions(this);
    public interface IGroundMapActions
    {
        void OnDirections(InputAction.CallbackContext context);
        void OnInteractPress(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
