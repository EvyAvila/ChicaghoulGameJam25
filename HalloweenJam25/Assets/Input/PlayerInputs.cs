//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""GroundMap"",
            ""id"": ""fd5993ec-debb-4714-86a9-779c246dddf5"",
            ""actions"": [
                {
                    ""name"": ""Directions"",
                    ""type"": ""Value"",
                    ""id"": ""be91e8d0-827a-403f-b979-b32748f8add3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a89f445-16e2-4bbb-8100-99d21dab66f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5db94cf5-a870-4f66-a5ed-5f73c15183ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.06,pressPoint=0.05)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryInteract"",
                    ""type"": ""Button"",
                    ""id"": ""c838dae5-50d7-48b9-bc0d-5517e8478519"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.06,pressPoint=0.05)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleRotate"",
                    ""type"": ""Button"",
                    ""id"": ""dd627db2-30b6-484f-a8c3-46d240f38974"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""feae1db4-aefb-481b-8281-24e9eb5b5cc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector MNK"",
                    ""id"": ""23dcb759-c4b0-4995-b453-133bdb653352"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba65e840-6a5c-4854-84f6-79e0c38fc6f3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""42e06b67-43b6-422e-981f-068377a73eb0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4bcfe703-8e3b-4653-9b31-2b9547c704e0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c7843094-5c53-419b-9741-03275057dffe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8f8c80c1-aa29-47dd-9ab3-2789a2adc488"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5afed25-b911-4da3-9ee6-8cdb009c433c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24d2102a-83ad-4bb5-994c-5b4aa700b66c"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09e4d5fc-32e4-4ae1-b8c4-e22fd07ce89b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59eba3bb-154e-4952-9e86-20ddeb255d59"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1445e42-1502-4cf2-aecd-43ec32f7c842"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f59124bd-ab52-4aa8-9b35-4918e8e831e4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d31a4d2c-ad86-432a-a8de-c86113dd54a5"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""dc088b33-2986-4b78-8a6f-4bef5932f53c"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""26d3b0dc-54cb-4f21-bf37-d91efc954ea2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b9cacfb-f7fa-42d4-bc09-9b8c5fd0f37e"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GroundMap
        m_GroundMap = asset.FindActionMap("GroundMap", throwIfNotFound: true);
        m_GroundMap_Directions = m_GroundMap.FindAction("Directions", throwIfNotFound: true);
        m_GroundMap_Aim = m_GroundMap.FindAction("Aim", throwIfNotFound: true);
        m_GroundMap_Interact = m_GroundMap.FindAction("Interact", throwIfNotFound: true);
        m_GroundMap_SecondaryInteract = m_GroundMap.FindAction("SecondaryInteract", throwIfNotFound: true);
        m_GroundMap_ToggleRotate = m_GroundMap.FindAction("ToggleRotate", throwIfNotFound: true);
        m_GroundMap_Zoom = m_GroundMap.FindAction("Zoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GroundMap
    private readonly InputActionMap m_GroundMap;
    private List<IGroundMapActions> m_GroundMapActionsCallbackInterfaces = new List<IGroundMapActions>();
    private readonly InputAction m_GroundMap_Directions;
    private readonly InputAction m_GroundMap_Aim;
    private readonly InputAction m_GroundMap_Interact;
    private readonly InputAction m_GroundMap_SecondaryInteract;
    private readonly InputAction m_GroundMap_ToggleRotate;
    private readonly InputAction m_GroundMap_Zoom;
    public struct GroundMapActions
    {
        private @PlayerInputs m_Wrapper;
        public GroundMapActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Directions => m_Wrapper.m_GroundMap_Directions;
        public InputAction @Aim => m_Wrapper.m_GroundMap_Aim;
        public InputAction @Interact => m_Wrapper.m_GroundMap_Interact;
        public InputAction @SecondaryInteract => m_Wrapper.m_GroundMap_SecondaryInteract;
        public InputAction @ToggleRotate => m_Wrapper.m_GroundMap_ToggleRotate;
        public InputAction @Zoom => m_Wrapper.m_GroundMap_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_GroundMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundMapActions set) { return set.Get(); }
        public void AddCallbacks(IGroundMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GroundMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GroundMapActionsCallbackInterfaces.Add(instance);
            @Directions.started += instance.OnDirections;
            @Directions.performed += instance.OnDirections;
            @Directions.canceled += instance.OnDirections;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @SecondaryInteract.started += instance.OnSecondaryInteract;
            @SecondaryInteract.performed += instance.OnSecondaryInteract;
            @SecondaryInteract.canceled += instance.OnSecondaryInteract;
            @ToggleRotate.started += instance.OnToggleRotate;
            @ToggleRotate.performed += instance.OnToggleRotate;
            @ToggleRotate.canceled += instance.OnToggleRotate;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
        }

        private void UnregisterCallbacks(IGroundMapActions instance)
        {
            @Directions.started -= instance.OnDirections;
            @Directions.performed -= instance.OnDirections;
            @Directions.canceled -= instance.OnDirections;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @SecondaryInteract.started -= instance.OnSecondaryInteract;
            @SecondaryInteract.performed -= instance.OnSecondaryInteract;
            @SecondaryInteract.canceled -= instance.OnSecondaryInteract;
            @ToggleRotate.started -= instance.OnToggleRotate;
            @ToggleRotate.performed -= instance.OnToggleRotate;
            @ToggleRotate.canceled -= instance.OnToggleRotate;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
        }

        public void RemoveCallbacks(IGroundMapActions instance)
        {
            if (m_Wrapper.m_GroundMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGroundMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GroundMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GroundMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GroundMapActions @GroundMap => new GroundMapActions(this);
    public interface IGroundMapActions
    {
        void OnDirections(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSecondaryInteract(InputAction.CallbackContext context);
        void OnToggleRotate(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
}
